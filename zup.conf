[server]
http_listen_host: *
http_listen_port: 5000
static_dir: static
template_dir: templates

[cron]
daemonize: false
processes: 4
threads: 5
default_interval: 120s
default_timeout: 15s

[includes]
files: zup/default_checks/*.conf data/zup/checks/*.conf data/zup/hosts/*.conf


[host:pumpkin.zalad.io]
iframeurl: /tasks

[host:grape.zalad.io]
iframeurl: https://grape.zervice.io/tasks

[task:CPU Usage]
enabled: true
description: CPU pct used
cmd: uptime
    | sed 's/.*: //'
    | sed 's/, / /g'
    | awk -v CORES=$(nproc) '{{print ($1/CORES)*100}}'
validate: float(stdout) <= int(threshold)
format: {int(float(stdout))}%
returncode: 0
threshold: 75

[task:RAM Usage]
enabled: true
description: RAM pct used
cmd: free -t
    | awk 'FNR == 2 {{print $3/$2*100}}'
returncode: 0
threshold: 75
validate: float(stdout) <= int(threshold)
format: {int(float(stdout))}%
interval: 10s
timeout: 5s

[task:Swap Usage]
enabled: true
description: Swap pct used
cmd: free -t
    | awk 'FNR == 3 {{print $3/$2*100}}'
returncode: 0
threshold: 75
validate: float(stdout) <= int(threshold)
format: {int(float(stdout))}%
interval: 10s
timeout: 5s

[task:Disk Usage]
enabled: true
description: Disk pct used
cmd: df -H /
    | sort -nrk5
    | head -1
    | awk '{{print $5}}'
    | tr -d %
returncode: 0
threshold: 85
validate: float(stdout) <= int(threshold)
format: {int(float(stdout))}%
interval: 60s
timeout: 20s

[task:WAN Ping]
enabled: true
description: WAN ping speed
cmd: ping -c {count} {host}
    | tail -1
    | perl -pe 's/^(.* = \d*\.\d*\/)(\d*)(.\d*\/.*)$/$2/gm'
host: 1.1.1.1
count: 1
returncode: 0
threshold: 100
format: {float(stdout):.2f}ms
validate: (float(stdout) <= int(threshold))
interval: 20s
timeout: 5s

[task:WAN Bandwidth]
enabled: true
description: WAN download speed
cmd: ./.venv/bin/speedtest --no-upload --simple
    | grep Download
    | awk '{{print $2}}'
returncode: 0
threshold: 100
validate: float(stdout) >= int(threshold)
format: {float(stdout):.2f}MB/s
interval: 300s
timeout: 120s

[task:DNS Loopback]
enabled: true
description: DNS lookup latency for a given host + response
cmd: dig -4 +short @{nameserver} {record} {record_type}
    | grep -E '[0-9]+\.[0-9]+'
nameserver: 1.1.1.1
record: pumpkin.zalad.io
record_type: A
returncode: 0
threshold: 200
validate: stdout == run("dig -4 +short @resolver1.opendns.com myip.opendns.com A | grep -E '[0-9]+\.[0-9]+'", shell=True, capture_output=True).stdout.decode().strip() and stdout.count(".") == 3 and (duration.total_seconds() <= int(threshold))
format: {duration.total_seconds() * 1000:.2f}ms
interval: 20s
timeout: 5s

[task:Hera Tunnels]
enabled: true
description: Hera cloudflare argo tunnel status
cmd: curl -s https://{host}
    | grep '{match}'
host: pumpkin.zervice.io
match: Hera is up.
returncode: 0
threshold: 200
validate: stdout == match and duration.total_seconds() <= int(threshold)
format: {duration.total_seconds() * 1000:.2f}ms
interval: 20s
timeout: 5s

[task:UPS Battery]
enabled: true
description: UPS battery runtime remaining
cmd: apcaccess status
    | grep {metric}
    | perl -pe 's/^{metric} : (.*)$/$1/gm'
metric: TIMELEFT
threshold: 2
validate: float(stdout.split(" ")[0]) >= int(threshold)
format: {float(stdout.split(" ")[0]):.2f}min
timeout: 10s
interval: 30s

[task:Docker Memory Usage]
enabled: true
description: Docker maximum container memory usage
cmd: docker stats --no-stream --format '{{{{.MemPerc}}}}'
    | sort -h
    | tail -n 1
    | tr -d '%'
threshold: 80
validate: float(stdout) < int(threshold)
format: {float(stdout):.2f}%
timeout: 10s
interval: 30s

[task:Docker CPU Usage]
enabled: true
description: Docker maximum container CPU usage
cmd: docker stats --no-stream --format '{{{{.CPUPerc}}}}'
    | sort -h
    | tail -n 1
    | tr -d '%'
threshold: 80
validate: float(stdout) < int(threshold)
format: {float(stdout):.2f}%
timeout: 10s
interval: 30s

; [task:Backups]
; cmd: ["rsync", "--quiet", "--archive", "{src}", "{dst}"]
; src: '/'
; dst: 'pumpkin.vpn:/zfs/usb-pumpkin/rsnapshots/squash.zalad.io/daily.0/localhost/'
; validate: "error" not in stdout
; format: {round(duration.hours, 1)}hr
; timeout: 72000s
; interval: 86400s

; [task:Redis Ping]
; enabled: false
; description: Redis ping latency
; cmd: redis-cli -h {host} ping
; host: 127.0.0.1
; threshold: 100
; validate: stdout == "PONG" and duration.total_seconds() < int(threshold)
; format: {duration.total_seconds() * 1000:.2f}ms
; timeout: 10s
; interval: 30s

; [task:Redis Throughput]
; enabled: false
; description: Redis instantaneous_input_kbps + instantaneous_output_kbps
; cmd: redis-cli -h {host} info stats
;     | awk -F ':' '$1 ~ /put_kbps/ {{sum += $2}} END {{print sum}}'
; host: 127.0.0.1
; threshold: 10
; validate: float(stdout)/1000 < int(threshold)
; format: {float(stdout):.2f}kbps
; timeout: 10s
; interval: 30s

